// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bank.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace QueryExampleBankAccount {

  /// <summary>Holder for reflection information generated from bank.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class BankReflection {

    #region Descriptor
    /// <summary>File descriptor for bank.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BankReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpiYW5rLnByb3RvEhpxdWVyeV9leGFtcGxlX2JhbmtfYWNjb3VudCK0AgoE",
            "VXNlchIKCgJpZBgBIAEoBRISCgphY2NvdW50SWRzGAIgASgFEgwKBG5hbWUY",
            "AyABKAkSDwoHc3VybmFtZRgEIAEoCRI7CglhZGRyZXNzZXMYBSADKAsyKC5x",
            "dWVyeV9leGFtcGxlX2JhbmtfYWNjb3VudC5Vc2VyLkFkZHJlc3MSCwoDYWdl",
            "GAYgASgFEjcKBmdlbmRlchgHIAEoDjInLnF1ZXJ5X2V4YW1wbGVfYmFua19h",
            "Y2NvdW50LlVzZXIuR2VuZGVyEg0KBW5vdGVzGAggASgJGjsKB0FkZHJlc3MS",
            "DgoGc3RyZWV0GAEgASgJEhAKCHBvc3RDb2RlGAIgASgJEg4KBm51bWJlchgD",
            "IAEoBSIeCgZHZW5kZXISCAoETUFMRRAAEgoKBkZFTUFMRRABIskBCgdBY2Nv",
            "dW50EgoKAmlkGAEgASgFEhMKC2Rlc2NyaXB0aW9uGAIgASgJEhQKDGNyZWF0",
            "aW9uRGF0ZRgDIAEoBhI6CgZsaW1pdHMYBCABKAsyKi5xdWVyeV9leGFtcGxl",
            "X2JhbmtfYWNjb3VudC5BY2NvdW50LkxpbWl0cxINCgVibHVyYhgFIAMoDBo8",
            "CgZMaW1pdHMSFQoNbWF4RGFpbHlMaW1pdBgBIAEoARIbChNtYXhUcmFuc2Fj",
            "dGlvbkxpbWl0GAIgASgBIoEBCgtUcmFuc2FjdGlvbhIKCgJpZBgBIAEoBRIT",
            "CgtkZXNjcmlwdGlvbhgCIAEoCRIRCglhY2NvdW50SWQYAyABKAUSDAoEZGF0",
            "ZRgEIAEoBhIOCgZhbW91bnQYBSABKAESDwoHaXNEZWJpdBgGIAEoCBIPCgdp",
            "c1ZhbGlkGAcgASgIIh0KCWludF9hcnJheRIQCgh0aGVBcnJheRgBIAMoBSI+",
            "Cgl1c2VyX2xpc3QSMQoHdGhlTGlzdBgBIAMoCzIgLnF1ZXJ5X2V4YW1wbGVf",
            "YmFua19hY2NvdW50LlVzZXJCLQofY29tLmV4YW1wbGUuZ2VuZXJhdGVkX2J5",
            "X3Byb3RvY0IKQmFua1Byb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::QueryExampleBankAccount.User), global::QueryExampleBankAccount.User.Parser, new[]{ "Id", "AccountIds", "Name", "Surname", "Addresses", "Age", "Gender", "Notes" }, null, new[]{ typeof(global::QueryExampleBankAccount.User.Types.Gender) }, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::QueryExampleBankAccount.User.Types.Address), global::QueryExampleBankAccount.User.Types.Address.Parser, new[]{ "Street", "PostCode", "Number" }, null, null, null)}),
            new pbr::GeneratedCodeInfo(typeof(global::QueryExampleBankAccount.Account), global::QueryExampleBankAccount.Account.Parser, new[]{ "Id", "Description", "CreationDate", "Limits", "Blurb" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::QueryExampleBankAccount.Account.Types.Limits), global::QueryExampleBankAccount.Account.Types.Limits.Parser, new[]{ "MaxDailyLimit", "MaxTransactionLimit" }, null, null, null)}),
            new pbr::GeneratedCodeInfo(typeof(global::QueryExampleBankAccount.Transaction), global::QueryExampleBankAccount.Transaction.Parser, new[]{ "Id", "Description", "AccountId", "Date", "Amount", "IsDebit", "IsValid" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::QueryExampleBankAccount.int_array), global::QueryExampleBankAccount.int_array.Parser, new[]{ "TheArray" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::QueryExampleBankAccount.user_list), global::QueryExampleBankAccount.user_list.Parser, new[]{ "TheList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// *
  ///  @Indexed(true)
  ///  @TypeId(42)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::QueryExampleBankAccount.BankReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    public User(User other) : this() {
      id_ = other.id_;
      accountIds_ = other.accountIds_;
      name_ = other.name_;
      surname_ = other.surname_;
      addresses_ = other.addresses_.Clone();
      age_ = other.age_;
      gender_ = other.gender_;
      notes_ = other.notes_;
    }

    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// *
    ///  @IndexedField(index=true, store=true)
    /// </summary>
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "accountIds" field.</summary>
    public const int AccountIdsFieldNumber = 2;
    private int accountIds_;
    /// <summary>
    /// *
    ///  @IndexedField()
    /// </summary>
    public int AccountIds {
      get { return accountIds_; }
      set {
        accountIds_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "surname" field.</summary>
    public const int SurnameFieldNumber = 4;
    private string surname_ = "";
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public string Surname {
      get { return surname_; }
      set {
        surname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::QueryExampleBankAccount.User.Types.Address> _repeated_addresses_codec
        = pb::FieldCodec.ForMessage(42, global::QueryExampleBankAccount.User.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::QueryExampleBankAccount.User.Types.Address> addresses_ = new pbc::RepeatedField<global::QueryExampleBankAccount.User.Types.Address>();
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public pbc::RepeatedField<global::QueryExampleBankAccount.User.Types.Address> Addresses {
      get { return addresses_; }
    }

    /// <summary>Field number for the "age" field.</summary>
    public const int AgeFieldNumber = 6;
    private int age_;
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public int Age {
      get { return age_; }
      set {
        age_ = value;
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 7;
    private global::QueryExampleBankAccount.User.Types.Gender gender_ = global::QueryExampleBankAccount.User.Types.Gender.MALE;
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public global::QueryExampleBankAccount.User.Types.Gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 8;
    private string notes_ = "";
    public string Notes {
      get { return notes_; }
      set {
        notes_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as User);
    }

    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AccountIds != other.AccountIds) return false;
      if (Name != other.Name) return false;
      if (Surname != other.Surname) return false;
      if(!addresses_.Equals(other.addresses_)) return false;
      if (Age != other.Age) return false;
      if (Gender != other.Gender) return false;
      if (Notes != other.Notes) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (AccountIds != 0) hash ^= AccountIds.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Surname.Length != 0) hash ^= Surname.GetHashCode();
      hash ^= addresses_.GetHashCode();
      if (Age != 0) hash ^= Age.GetHashCode();
      if (Gender != global::QueryExampleBankAccount.User.Types.Gender.MALE) hash ^= Gender.GetHashCode();
      if (Notes.Length != 0) hash ^= Notes.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (AccountIds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AccountIds);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Surname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Surname);
      }
      addresses_.WriteTo(output, _repeated_addresses_codec);
      if (Age != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Age);
      }
      if (Gender != global::QueryExampleBankAccount.User.Types.Gender.MALE) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Gender);
      }
      if (Notes.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Notes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (AccountIds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountIds);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Surname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Surname);
      }
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      if (Age != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Age);
      }
      if (Gender != global::QueryExampleBankAccount.User.Types.Gender.MALE) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (Notes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notes);
      }
      return size;
    }

    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.AccountIds != 0) {
        AccountIds = other.AccountIds;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Surname.Length != 0) {
        Surname = other.Surname;
      }
      addresses_.Add(other.addresses_);
      if (other.Age != 0) {
        Age = other.Age;
      }
      if (other.Gender != global::QueryExampleBankAccount.User.Types.Gender.MALE) {
        Gender = other.Gender;
      }
      if (other.Notes.Length != 0) {
        Notes = other.Notes;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            AccountIds = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Surname = input.ReadString();
            break;
          }
          case 42: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
          case 48: {
            Age = input.ReadInt32();
            break;
          }
          case 56: {
            gender_ = (global::QueryExampleBankAccount.User.Types.Gender) input.ReadEnum();
            break;
          }
          case 66: {
            Notes = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the User message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      /// <summary>
      ///  @TypeId(41) 
      /// </summary>
      public enum Gender {
        /// <summary>
        /// NOTE: It seems negative values are accepted too!
        /// </summary>
        MALE = 0,
        FEMALE = 1,
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Address : pb::IMessage<Address> {
        private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
        public static pb::MessageParser<Address> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::QueryExampleBankAccount.User.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public Address() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Address(Address other) : this() {
          street_ = other.street_;
          postCode_ = other.postCode_;
          number_ = other.number_;
        }

        public Address Clone() {
          return new Address(this);
        }

        /// <summary>Field number for the "street" field.</summary>
        public const int StreetFieldNumber = 1;
        private string street_ = "";
        public string Street {
          get { return street_; }
          set {
            street_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "postCode" field.</summary>
        public const int PostCodeFieldNumber = 2;
        private string postCode_ = "";
        public string PostCode {
          get { return postCode_; }
          set {
            postCode_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "number" field.</summary>
        public const int NumberFieldNumber = 3;
        private int number_;
        public int Number {
          get { return number_; }
          set {
            number_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as Address);
        }

        public bool Equals(Address other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Street != other.Street) return false;
          if (PostCode != other.PostCode) return false;
          if (Number != other.Number) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Street.Length != 0) hash ^= Street.GetHashCode();
          if (PostCode.Length != 0) hash ^= PostCode.GetHashCode();
          if (Number != 0) hash ^= Number.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Street.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Street);
          }
          if (PostCode.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(PostCode);
          }
          if (Number != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Number);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Street.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Street);
          }
          if (PostCode.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PostCode);
          }
          if (Number != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
          }
          return size;
        }

        public void MergeFrom(Address other) {
          if (other == null) {
            return;
          }
          if (other.Street.Length != 0) {
            Street = other.Street;
          }
          if (other.PostCode.Length != 0) {
            PostCode = other.PostCode;
          }
          if (other.Number != 0) {
            Number = other.Number;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Street = input.ReadString();
                break;
              }
              case 18: {
                PostCode = input.ReadString();
                break;
              }
              case 24: {
                Number = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// *
  ///  @Indexed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Account : pb::IMessage<Account> {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::QueryExampleBankAccount.BankReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Account(Account other) : this() {
      id_ = other.id_;
      description_ = other.description_;
      creationDate_ = other.creationDate_;
      Limits = other.limits_ != null ? other.Limits.Clone() : null;
      blurb_ = other.blurb_.Clone();
    }

    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public string Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "creationDate" field.</summary>
    public const int CreationDateFieldNumber = 3;
    private ulong creationDate_;
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public ulong CreationDate {
      get { return creationDate_; }
      set {
        creationDate_ = value;
      }
    }

    /// <summary>Field number for the "limits" field.</summary>
    public const int LimitsFieldNumber = 4;
    private global::QueryExampleBankAccount.Account.Types.Limits limits_;
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public global::QueryExampleBankAccount.Account.Types.Limits Limits {
      get { return limits_; }
      set {
        limits_ = value;
      }
    }

    /// <summary>Field number for the "blurb" field.</summary>
    public const int BlurbFieldNumber = 5;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_blurb_codec
        = pb::FieldCodec.ForBytes(42);
    private readonly pbc::RepeatedField<pb::ByteString> blurb_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public pbc::RepeatedField<pb::ByteString> Blurb {
      get { return blurb_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Description != other.Description) return false;
      if (CreationDate != other.CreationDate) return false;
      if (!object.Equals(Limits, other.Limits)) return false;
      if(!blurb_.Equals(other.blurb_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (CreationDate != 0UL) hash ^= CreationDate.GetHashCode();
      if (limits_ != null) hash ^= Limits.GetHashCode();
      hash ^= blurb_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (CreationDate != 0UL) {
        output.WriteRawTag(25);
        output.WriteFixed64(CreationDate);
      }
      if (limits_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Limits);
      }
      blurb_.WriteTo(output, _repeated_blurb_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (CreationDate != 0UL) {
        size += 1 + 8;
      }
      if (limits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Limits);
      }
      size += blurb_.CalculateSize(_repeated_blurb_codec);
      return size;
    }

    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.CreationDate != 0UL) {
        CreationDate = other.CreationDate;
      }
      if (other.limits_ != null) {
        if (limits_ == null) {
          limits_ = new global::QueryExampleBankAccount.Account.Types.Limits();
        }
        Limits.MergeFrom(other.Limits);
      }
      blurb_.Add(other.blurb_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 25: {
            CreationDate = input.ReadFixed64();
            break;
          }
          case 34: {
            if (limits_ == null) {
              limits_ = new global::QueryExampleBankAccount.Account.Types.Limits();
            }
            input.ReadMessage(limits_);
            break;
          }
          case 42: {
            blurb_.AddEntriesFrom(input, _repeated_blurb_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Account message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Limits : pb::IMessage<Limits> {
        private static readonly pb::MessageParser<Limits> _parser = new pb::MessageParser<Limits>(() => new Limits());
        public static pb::MessageParser<Limits> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::QueryExampleBankAccount.Account.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public Limits() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Limits(Limits other) : this() {
          maxDailyLimit_ = other.maxDailyLimit_;
          maxTransactionLimit_ = other.maxTransactionLimit_;
        }

        public Limits Clone() {
          return new Limits(this);
        }

        /// <summary>Field number for the "maxDailyLimit" field.</summary>
        public const int MaxDailyLimitFieldNumber = 1;
        private double maxDailyLimit_;
        public double MaxDailyLimit {
          get { return maxDailyLimit_; }
          set {
            maxDailyLimit_ = value;
          }
        }

        /// <summary>Field number for the "maxTransactionLimit" field.</summary>
        public const int MaxTransactionLimitFieldNumber = 2;
        private double maxTransactionLimit_;
        public double MaxTransactionLimit {
          get { return maxTransactionLimit_; }
          set {
            maxTransactionLimit_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as Limits);
        }

        public bool Equals(Limits other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MaxDailyLimit != other.MaxDailyLimit) return false;
          if (MaxTransactionLimit != other.MaxTransactionLimit) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (MaxDailyLimit != 0D) hash ^= MaxDailyLimit.GetHashCode();
          if (MaxTransactionLimit != 0D) hash ^= MaxTransactionLimit.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (MaxDailyLimit != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(MaxDailyLimit);
          }
          if (MaxTransactionLimit != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(MaxTransactionLimit);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (MaxDailyLimit != 0D) {
            size += 1 + 8;
          }
          if (MaxTransactionLimit != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        public void MergeFrom(Limits other) {
          if (other == null) {
            return;
          }
          if (other.MaxDailyLimit != 0D) {
            MaxDailyLimit = other.MaxDailyLimit;
          }
          if (other.MaxTransactionLimit != 0D) {
            MaxTransactionLimit = other.MaxTransactionLimit;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 9: {
                MaxDailyLimit = input.ReadDouble();
                break;
              }
              case 17: {
                MaxTransactionLimit = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// *
  ///  @Indexed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::QueryExampleBankAccount.BankReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Transaction(Transaction other) : this() {
      id_ = other.id_;
      description_ = other.description_;
      accountId_ = other.accountId_;
      date_ = other.date_;
      amount_ = other.amount_;
      isDebit_ = other.isDebit_;
      isValid_ = other.isValid_;
    }

    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// *
    ///  @IndexedField(store = false)
    /// </summary>
    public string Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 3;
    private int accountId_;
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 4;
    private ulong date_;
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public ulong Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 5;
    private double amount_;
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "isDebit" field.</summary>
    public const int IsDebitFieldNumber = 6;
    private bool isDebit_;
    /// <summary>
    /// *
    ///  @IndexedField
    /// </summary>
    public bool IsDebit {
      get { return isDebit_; }
      set {
        isDebit_ = value;
      }
    }

    /// <summary>Field number for the "isValid" field.</summary>
    public const int IsValidFieldNumber = 7;
    private bool isValid_;
    public bool IsValid {
      get { return isValid_; }
      set {
        isValid_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Description != other.Description) return false;
      if (AccountId != other.AccountId) return false;
      if (Date != other.Date) return false;
      if (Amount != other.Amount) return false;
      if (IsDebit != other.IsDebit) return false;
      if (IsValid != other.IsValid) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (Date != 0UL) hash ^= Date.GetHashCode();
      if (Amount != 0D) hash ^= Amount.GetHashCode();
      if (IsDebit != false) hash ^= IsDebit.GetHashCode();
      if (IsValid != false) hash ^= IsValid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (AccountId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AccountId);
      }
      if (Date != 0UL) {
        output.WriteRawTag(33);
        output.WriteFixed64(Date);
      }
      if (Amount != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Amount);
      }
      if (IsDebit != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsDebit);
      }
      if (IsValid != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsValid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      if (Date != 0UL) {
        size += 1 + 8;
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      if (IsDebit != false) {
        size += 1 + 1;
      }
      if (IsValid != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.Date != 0UL) {
        Date = other.Date;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      if (other.IsDebit != false) {
        IsDebit = other.IsDebit;
      }
      if (other.IsValid != false) {
        IsValid = other.IsValid;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 24: {
            AccountId = input.ReadInt32();
            break;
          }
          case 33: {
            Date = input.ReadFixed64();
            break;
          }
          case 41: {
            Amount = input.ReadDouble();
            break;
          }
          case 48: {
            IsDebit = input.ReadBool();
            break;
          }
          case 56: {
            IsValid = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// *
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class int_array : pb::IMessage<int_array> {
    private static readonly pb::MessageParser<int_array> _parser = new pb::MessageParser<int_array>(() => new int_array());
    public static pb::MessageParser<int_array> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::QueryExampleBankAccount.BankReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public int_array() {
      OnConstruction();
    }

    partial void OnConstruction();

    public int_array(int_array other) : this() {
      theArray_ = other.theArray_.Clone();
    }

    public int_array Clone() {
      return new int_array(this);
    }

    /// <summary>Field number for the "theArray" field.</summary>
    public const int TheArrayFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_theArray_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> theArray_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> TheArray {
      get { return theArray_; }
    }

    public override bool Equals(object other) {
      return Equals(other as int_array);
    }

    public bool Equals(int_array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!theArray_.Equals(other.theArray_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= theArray_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      theArray_.WriteTo(output, _repeated_theArray_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += theArray_.CalculateSize(_repeated_theArray_codec);
      return size;
    }

    public void MergeFrom(int_array other) {
      if (other == null) {
        return;
      }
      theArray_.Add(other.theArray_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            theArray_.AddEntriesFrom(input, _repeated_theArray_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// *
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class user_list : pb::IMessage<user_list> {
    private static readonly pb::MessageParser<user_list> _parser = new pb::MessageParser<user_list>(() => new user_list());
    public static pb::MessageParser<user_list> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::QueryExampleBankAccount.BankReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public user_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    public user_list(user_list other) : this() {
      theList_ = other.theList_.Clone();
    }

    public user_list Clone() {
      return new user_list(this);
    }

    /// <summary>Field number for the "theList" field.</summary>
    public const int TheListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::QueryExampleBankAccount.User> _repeated_theList_codec
        = pb::FieldCodec.ForMessage(10, global::QueryExampleBankAccount.User.Parser);
    private readonly pbc::RepeatedField<global::QueryExampleBankAccount.User> theList_ = new pbc::RepeatedField<global::QueryExampleBankAccount.User>();
    public pbc::RepeatedField<global::QueryExampleBankAccount.User> TheList {
      get { return theList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as user_list);
    }

    public bool Equals(user_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!theList_.Equals(other.theList_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= theList_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      theList_.WriteTo(output, _repeated_theList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += theList_.CalculateSize(_repeated_theList_codec);
      return size;
    }

    public void MergeFrom(user_list other) {
      if (other == null) {
        return;
      }
      theList_.Add(other.theList_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            theList_.AddEntriesFrom(input, _repeated_theList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
